// <auto-generated />
using System;
using CTrace.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CTrace.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20211211194305_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CTrace.Models.Contact", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("contact_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("contact_createdbyid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrimaryUserId")
                        .HasColumnName("contact_primaryuserid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Reported")
                        .HasColumnName("contact_reported")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SecondUserId")
                        .HasColumnName("contact_seconderyuserid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnName("contact_time")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PrimaryUserId");

                    b.HasIndex("SecondUserId");

                    b.ToTable("tab_contact");
                });

            modelBuilder.Entity("CTrace.Models.Detection", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("detection_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnName("contact_createdby")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DetectedAt")
                        .HasColumnName("detection_time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnName("detection_user")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UserId");

                    b.ToTable("tab_detection");
                });

            modelBuilder.Entity("CTrace.Models.Notification", b =>
                {
                    b.Property<Guid>("notif_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("notif_id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnName("notif_user")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("notif_created")
                        .HasColumnName("notif_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("notif_redirect")
                        .HasColumnName("notif_redirect")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notif_text")
                        .IsRequired()
                        .HasColumnName("notif_text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("notif_ṛead")
                        .HasColumnName("notif_ṛead")
                        .HasColumnType("datetime2");

                    b.HasKey("notif_id");

                    b.HasIndex("UserId");

                    b.ToTable("tab_notification");
                });

            modelBuilder.Entity("CTrace.Models.User", b =>
                {
                    b.Property<Guid>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(new Guid("fe35927f-049a-4768-817b-6808d37113fa"));

                    b.Property<byte>("user_failcount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_failcount")
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("0");

                    b.Property<string>("user_fname")
                        .IsRequired()
                        .HasColumnName("user_fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("user_isadmin")
                        .IsRequired()
                        .HasColumnName("user_isadmin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("user_lastlogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_lastlogin")
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("user_lname")
                        .HasColumnName("user_lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_mobile")
                        .IsRequired()
                        .HasColumnName("user_mobile")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("user_pass")
                        .IsRequired()
                        .HasColumnName("user_pass")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.Property<string>("user_salt")
                        .IsRequired()
                        .HasColumnName("user_salt")
                        .HasColumnType("nvarchar(64)")
                        .HasMaxLength(64);

                    b.HasKey("user_id");

                    b.HasIndex("user_mobile")
                        .IsUnique();

                    b.ToTable("tab_users");

                    b.HasData(
                        new
                        {
                            user_id = new Guid("69c3e099-d215-4b8d-9192-d204f18168a4"),
                            user_failcount = (byte)0,
                            user_fname = "Admin",
                            user_isadmin = true,
                            user_lastlogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            user_mobile = "admin",
                            user_pass = "Qosok1wMdRHHX+CntKHYubf1j8eK3h6oxjl34mt/bOM=",
                            user_salt = "2A/eYfNMF4DKNRzOVRAReQ=="
                        });
                });

            modelBuilder.Entity("CTrace.Models.Contact", b =>
                {
                    b.HasOne("CTrace.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CTrace.Models.User", "PrimaryUser")
                        .WithMany()
                        .HasForeignKey("PrimaryUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CTrace.Models.User", "SecondUser")
                        .WithMany()
                        .HasForeignKey("SecondUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CTrace.Models.Detection", b =>
                {
                    b.HasOne("CTrace.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CTrace.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CTrace.Models.Notification", b =>
                {
                    b.HasOne("CTrace.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
